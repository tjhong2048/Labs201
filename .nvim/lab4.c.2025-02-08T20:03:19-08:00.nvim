#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BUF_SIZE 128

struct header {
  uint64_t size;
  struct header *next;
};

void handle_error(const char *msg) {
  write(STDERR_FILENO, msg, strlen(msg));
  exit(EXIT_FAILURE);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main(void) {
  void *one = sbrk(BUF_SIZE * 2);
  if (one == (void *)-1) {
    handle_error("sbrk failed");
  }

  void *two = one + BUF_SIZE;
  struct header *h1 = (struct header *)one;
  struct header *h2 = (struct header *)two;

  h1->next = NULL;
  h1->size = BUF_SIZE;

  h2->next = h1;
  h2->size = BUF_SIZE;

  print_out("first block: %p\n", &one, sizeof(void *));
  print_out("second block: %p\n", &two, sizeof(void *));

  print_out("first block size: %d\n", &h1->size, sizeof(uint64_t));
  print_out("first block next: %p\n", &h1->next, sizeof(void *));

  print_out("second block size: %d\n", &h2->size, sizeof(uint64_t));
  print_out("second block next: %p\n", &h2->next, sizeof(void *));

  memset(one + sizeof(struct header), 0, BUF_SIZE - sizeof(struct header));
  memset(two + sizeof(struct header), 1, BUF_SIZE - sizeof(struct header));

  uint8_t *data1 = (uint8_t *)one + sizeof(struct header);
  uint8_t *data2 = (uint8_t *)two + sizeof(struct header);

  for (int i = sizeof(struct header); i < BUF_SIZE - sizeof(struct header);
       i++) {
    print_out("%d\n", &one[i], sizeof(unsigned char *));
  }

  print_out("--------\n", (void *)one, sizeof(void *));

  for (int i = sizeof(struct header); i < BUF_SIZE - sizeof(struct header);
       i++) {
    /*print_out("%u\n", &((uint8_t *)two)[i], sizeof(uint8_t));*/
    printf("%u\n", ((uint8_t *)two)[i]);
  }

  return 0;
}
